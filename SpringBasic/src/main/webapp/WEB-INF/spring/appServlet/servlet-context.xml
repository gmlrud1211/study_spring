<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />
	
	<!-- 인터셉터 등록 -->
 	<interceptors>
		<interceptor>
			<!--  인터셉터 처리되는 URL 매핑  -->
			<mapping path="/interceptor/admin/**"/> <!-- *이 1개면 한단계만 가능 **면 여러단계 가능 -->
			 <!--  인터셉터 제외 URL 매핑  -->
			 <exclude-mapping path="/interceptor/admin/adminFail"/>
			<beans:bean class="web.interceptor.AdminInterceptor"/> 
		</interceptor>
		
		<interceptor>
			<mapping path = "/board/interceptor/**"></mapping>
			
			<exclude-mapping path="/board/interceptor/writeFail"></exclude-mapping>
			<beans:bean class="web.interceptor.BoardInterceptor"></beans:bean>
		</interceptor>
	</interceptors>
	

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/img/**" location="/resources/img" />
	<!-- 실제경로를 외부에서 알수없음, url을 바꾸면서 편하게 접근가능 -->
	<!-- 정적인자원에대한 속성값 정의 location:폴더위치  resources로 mapping한다는 의미-->
	
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
											<!-- 뷰파일을 이용해서 뷰를 생성해주는 설정 -->
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<!--  view부분에 대한 설정 -->
		<beans:property name="order" value="2"/>
		
	<!-- url 기반의 ViewResolver -->
	</beans:bean>
	
	<beans:bean id="tilesViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
	
		<beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView"/>
	
		<beans:property name="order" value="1"/>	
	</beans:bean>
	
	<!--  ui layout 구성 설정 파일 -->
	<beans:bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<beans:property name="definitions">
			<beans:list>
				<beans:value>/WEB-INF/tiles/template.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>
	
	
	<!-- 스프링빈 기반의 뷰리졸버 -->
	<beans:bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<beans:property name="order" value="0" />
	</beans:bean>
	
	<!--  다운로드 view를 down이라는 이름의 빈으로 등록 -->
	<beans:bean id="down" class="web.view.DownloadView" />
	
	
	
	<!--  json 응답을 위한 jsonView 빈 등록 -->
	<beans:bean id="jsonView" class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
		<beans:property name="contentType" value="application/json;charset=utf-8"/>
	</beans:bean>
	
	
	
	
	<!-- 파일 요청파라미터 처리 리졸버 -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="10485760"/>
		<beans:property name="maxInMemorySize" value="1048576"/>		
	</beans:bean>
	
	<context:component-scan base-package="web" />
	
	
	
</beans:beans>
